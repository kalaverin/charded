exclude = [
  "__pycache__",
  ".git",
  "docs/etc.py"
]
line-length = 89
output-format = "full"
target-version = "py311"

[lint]
ignore = [
  "EM102",  # Exception must not use an f-string literal, assign to variable first
  "FBT001",  # Boolean-typed positional argument in function definition
  "G004",  # Logging statement uses f-string
  "PLR2044",  # Line with empty comment
  "RET503"  # Missing explicit `return` at the end of function able to return non-`None` value
]
select = [
  "A",
  "B",
  # "D",
  "E",
  "F",
  "G",
  "I",
  "N",
  "Q",
  "S",
  "W",
  "C4",
  "DJ",
  "EM",
  "FA",
  "PD",
  "PL",
  "PT",
  "TC",
  "TD",
  "UP",
  "AIR",
  # "ANN",  # annotations needs
  "ARG",
  "BLE",
  "C90",
  "COM",
  # "CPY",  # non usable without docstrings
  # "DOC",  # non usable without docstrings
  "DTZ",
  "ERA",
  "EXE",
  "FBT",
  "FIX",
  "FLY",
  "ICN",
  "INP",
  "INT",
  "ISC",
  "LOG",
  "NPY",
  "PGH",
  "PIE",
  "PTH",
  "PYI",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "T10",
  "T20",
  "TID",
  "TRY",
  "YTT",
  "FAST",
  "FURB",
  "PERF",
  "SLOT",
  "ASYNC"
]
unfixable = [
  "G004",  # Logging statement uses f-string
  "ERA001",  # Found commented-out code
  "RUF012"  # loop: linter want this, but after use NOQA mark - fixer remove mark
]

[lint.flake8-annotations]
suppress-dummy-args = true

[lint.flake8-pytest-style]
fixture-parentheses = false
parametrize-names-type = "csv"
parametrize-values-type = "tuple"

[lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[lint.isort]
force-to-top = []  # used for override special importers in tests/
known-first-party = ["charded"]
relative-imports-order = "closest-to-furthest"
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder"
]
split-on-trailing-comma = true

[lint.mccabe]
max-complexity = 12
